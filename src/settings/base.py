"""
Django settings for src project.

Generated by 'django-admin startproject' using Django 4.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
import sys
from datetime import timedelta
from pathlib import Path

from ..celery import app as celery_app  # noqa

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

sys.path.append(os.path.join(BASE_DIR, "../apps"))

SECRET_KEY = os.environ.get("SECRET_KEY")

ALLOWED_HOSTS = []

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # third party
    "rest_framework",
    "rest_framework_simplejwt",
    "corsheaders",
    "django_celery_beat",
    "django_celery_results",
    "django_filters",
    "django_countries",
    # apps
    "auth",
    "users",
    "templates",
    "documents",
    "customers",
    "invoices",
    "sources",
    "sources.customer_portal",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "src.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "../templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "src.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.contrib.gis.db.backends.postgis",
        "NAME": os.environ["DB_NAME"],
        "USER": os.environ["DB_USER"],
        "PASSWORD": os.environ["DB_PASSWORD"],
        "HOST": os.environ["DB_HOST"],
        "PORT": os.environ["DB_PORT"],
    },
    "billing_service": {
        "ENGINE": "django.contrib.gis.db.backends.postgis",
        "NAME": os.environ.get("BS_DB_NAME"),
        "USER": os.environ.get("BS_DB_USER"),
        "PASSWORD": os.environ.get("BS_DB_PASSWORD"),
        "HOST": os.environ.get("BS_DB_HOST"),
        "PORT": os.environ.get("BS_DB_PORT"),
    },
    "data_service": {
        "ENGINE": "django.contrib.gis.db.backends.postgis",
        "NAME": os.environ.get("DS_DB_NAME"),
        "USER": os.environ.get("DS_USER"),
        "PASSWORD": os.environ.get("DS_PASSWORD"),
        "HOST": os.environ.get("DS_HOST"),
        "PORT": os.environ.get("DS_PORT"),
    },
    "customer_portal": {
        "ENGINE": "django.contrib.gis.db.backends.postgis",
        "NAME": os.environ.get("CP_DB_NAME"),
        "USER": os.environ.get("CP_DB_USER"),
        "PASSWORD": os.environ.get("CP_DB_PASSWORD"),
        "HOST": os.environ.get("CP_DB_HOST"),
        "PORT": os.environ.get("CP_DB_PORT"),
    },
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated"
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend"
    ],
    "DEFAULT_SCHEMA_CLASS": "rest_framework.schemas.coreapi.AutoSchema",
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 30,
    "TEST_REQUEST_DEFAULT_FORMAT": "json",
}

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

AUTH_USER_MODEL = "users.User"

# Static files (CSS, JavaScript, Images)
STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "../static")

# Media configuration
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "../media")


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True

# Cache
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": os.environ["REDIS_HOST"],
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    }
}

# JWT config
ACCESS_TOKEN_LIFETIME_MINUTES = os.environ.get(
    "ACCESS_TOKEN_LIFETIME_MINUTES", 60
)
SIMPLE_JWT = {
    "TOKEN_OBTAIN_SERIALIZER": "auth.serializers.UserTokenObtainSerializer",
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=ACCESS_TOKEN_LIFETIME_MINUTES),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": True,
}

BACKEND_DOMAIN = os.environ.get("BACKEND_DOMAIN")

if BACKEND_DOMAIN:
    MEDIA_URL = BACKEND_DOMAIN + MEDIA_URL

CELERY_RESULT_BACKEND = "django-db"
CELERY_BROKER_URL = os.environ["CELERY_BROKER"]
CELERY_ACCEPT_CONTENT = ["pickle", "json"]
CELERYD_TASK_SOFT_TIME_LIMIT = 60
CELERY_ENABLE_UTC = True

CARBONE_IO_API_URL = os.environ.get(
    "CARBONE_IO_API_URL", "https://api.carbone.io"
)
CARBONE_IO_API_PRODUCTION_TOKEN = os.environ.get(
    "CARBONE_IO_API_PRODUCTION_TOKEN", ""
)
CARBONE_IO_API_TEST_TOKEN = os.environ.get("CARBONE_IO_API_TEST_TOKEN", "")
